void 	algo(t_anthill *anthill)
{
	int *shortest_way;
	int *flag;
	int i;
	int j;
	//int min;
	int m;

	i = 0;
	if (!(shortest_way = (int*)ft_memalloc(sizeof(int) * anthill->num_of_rooms))
		|| !(flag = (int*)ft_memalloc(sizeof(int) * anthill->num_of_rooms)))
		exit_error(); //free all
	while(i < anthill->num_of_rooms)
	{
		shortest_way[i] = 9999;
		flag[i] = 0;
	}
	shortest_way[anthill->start] = 0;
	//flag[anthill->start] = 1;
	i = 0;
	j = 0;
	m = 0;
	while (m < 9999)
	{
		i = 0;
		//i = min_vertex;
		flag[anthill->start] = 1;
		j = 0;
		while (++j < anthill->num_of_rooms)
		{
			if (shortest_way[i] + anthill->table_links[i][j] < shortest_way[j])
			{
				shortest_way[j] = shortest_way[i] + anthill->table_links[i][j];
			}
		}
		m = 9999;
		j = 0;
		while (++j < anthill->num_of_rooms)
		{
			if (!flag[j] && shortest_way[j] < m)
			{
				m = shortest_way[j];
				//min_vertex = j;
				m++;
			}
		}
		i++;
	}
	




	/*while(i < anthill->num_of_rooms)
	{
		min = 9999;
		m = 0;
		while (m < anthill->num_of_rooms && flag[i] == 0 && i)
		{
			if (shortest_way[m] < min)
			{
				min = shortest_way[m];
				i = m;
			}
			m++;
		}
		while (j < anthill->num_of_rooms)
		{
			if (anthill->table_links[i][j] == 1)
				if (min + anthill->table_links[i][j] < shortest_way[i])
					shortest_way[i] = min + anthill->table_links[i][j];
			j++;
		}
		flag[i] = 1;
	}*/





/*t_way *head;
	t_way *head_next;
	int count;
	count = 0;
	head_next = NULL;
	head = NULL;
	if (anthill->num_of_ways == 1)
	{
		while (count < anthill->num_ants)
		{
			count++;
			head->size_ant++;
		}
	}
	else
	{
		head = anthill->head_ways;
		head_next = anthill->head_ways->next;
		while (count < anthill->num_ants)
		{
			if (head->size_way + head->size_ant <= head_next->size_way + head_next->size_ant)
			{
				count++;
				head->size_ant++;
				printf("count = %d\n", count);
			}
			else if (head->size_way + head->size_ant > head_next->size_way + head_next->size_ant && head_next->next)
			{
				head = head_next;
				head_next = head_next->next;
			}
		}
	}*/